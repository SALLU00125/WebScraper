# Generated by Selenium IDE
from Imports_Packages import *


class TestOlx():
    def __init__(self, data):
        self.data = data
        self.IterationValueHolder=None

    @staticmethod
    def load_json(filename):
        with open(filename, 'r') as file:
            Data = json.load(file)
        return Data

    @staticmethod
    def selector_mapper(selector):
        by_mapping = {
            'ID': By.ID,
            'NAME': By.NAME,
            'XPATH': By.XPATH,
            'CSS_SELECTOR': By.CSS_SELECTOR,
            'TAG_NAME': By.TAG_NAME,
            # Add more mappings as needed
        }
        return ( by_mapping.get(selector) )

    def setup_method(self, ):
        self.driver = webdriver.Firefox()
        self.vars = {}

    def teardown_method(self, ):
        self.driver.quit()

    def click_element_until_hidden_or_disabled(self, CSS_selector, timeout=60, sleep_interval=1):
        start_time = time.time()
        while time.time() - start_time < timeout:
            try:
                element = WebDriverWait(self.driver, 20).until(
                    EC.element_to_be_clickable((By.CSS_SELECTOR, CSS_selector))
                )
                element.click()
            except TimeoutException:
                # Handle timeout (element not found, disabled, or hidden)
                break
            except Exception as e:
                # Handle other exceptions if necessary
                print(f"An error occurred: {e}")
                break
            time.sleep(sleep_interval)

    def remove_element(self, selector, selectorValue ):
        while True:
            try:
                # Wait for the presence of the element with the given ID
                element_to_remove = WebDriverWait(self.driver, 10).until(
                    EC.presence_of_element_located((self.selector_mapper(selector), selectorValue))
                )
                # Execute JavaScript to remove the element from the DOM
                self.driver.execute_script("arguments[0].remove();", element_to_remove)
            except TimeoutException:
                # No more instances found, break out of the loop
                break

    def test_olx(self):
        # 1 | open | https://www.olx.com.pk/ |
        self.driver.get(self.data["website"])
        # 2 | setWindowSize | 1240x703 |
        self.driver.set_window_size(1240, 703)
        # 3 | click | css=.\_162767a9:nth-child(1) |
        self.driver.find_element(By.CSS_SELECTOR, ".\\_162767a9:nth-child(1)").click()
        # 4 | type | css=.\_162767a9:nth-child(1) | ipad mini 6
        self.driver.find_element(By.CSS_SELECTOR, ".\\_162767a9:nth-child(1)").send_keys(self.data["search"])
        # 5 | sendKeys | css=.\_162767a9:nth-child(1) | ${KEY_ENTER}
        self.driver.find_element(By.CSS_SELECTOR, ".\\_162767a9:nth-child(1)").send_keys(Keys.ENTER)
        # 6 | click | css=.\_95dae89d > .\_4408f4a8 |
        self.click_element_until_hidden_or_disabled(".\\_4408f4a8 > .\\_5079de6b:nth-child(1)")
        # 7 | runScript | window.scrollTo(0,4517.14990234375) |
        self.driver.execute_script("window.scrollTo(0,4517.14990234375)")
        # 8 | click | css=.\_4408f4a8 > .\_5079de6b:nth-child(1) |

        self.remove_element("CSS_SELECTOR", '[id^="ad-placement-middle-"]')

        try:
            # Find all <li> elements that match the specified structure
            matching_elements = self.driver.find_elements(By.XPATH,
                                                     '//ul[@class="ba608fb8 de8df3a3"]/li[@aria-label="Listing"]/article[@class="_7e3920c1"]')
            print(len(matching_elements))
            # Process the matching elements

            for element in matching_elements:
                link = element.find_element(By.TAG_NAME,'a')
                href = link.get_attribute('href')
                title = link.get_attribute('title')
                # print('Class Text:', self.IterationValueHolder.text)
                print('Href:', href)
                print('Title:', title)
                print("\n")
                self.IterationValueHolder = None


        finally:
            # Close the browser
            self.driver.quit()

jsonpath= r"./DataWrapped.json"
data = TestOlx.load_json(jsonpath)
print(data["website"])
testolx = TestOlx(data)
testolx.setup_method()
testolx.test_olx()
